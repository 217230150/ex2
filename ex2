CREATE TABLE doctors (
    doctor_id SERIAL PRIMARY KEY,
    name TEXT NOT NULL,
    specialization TEXT NOT NULL
);
CREATE TABLE medication_stock (
    medication_id SERIAL PRIMARY KEY,
    medication_name VARCHAR NOT NULL,
    quantity INTEGER NOT NULL
);
CREATE TABLE nurses (
    nurse_id SERIAL PRIMARY KEY,
    name TEXT NOT NULL,
    shift TEXT NOT NULL CHECK(SHIFT IN ('Morning','Evening','Night'))
);

CREATE TABLE patients (
    patient_id SERIAL PRIMARY KEY,
    name TEXT NOT NULL,
    age INT NOT NULL,
    room_no INT NOT NULL,
    doctor_id INT REFERENCES doctors(doctor_id)
);

CREATE TABLE treatments (
    treatment_id SERIAL PRIMARY KEY,
    patient_id INT REFERENCES patients(patient_id),
    nurse_id INT REFERENCES nurses(nurse_id),
    treatment_type TEXT NOT NULL,
    treatment_time TIMESTAMP NOT NULL
);

CREATE TABLE sensors (
    sensor_id SERIAL PRIMARY KEY,
    patient_id INT REFERENCES patients(patient_id),
    sensor_type TEXT NOT NULL,
    reading NUMERIC NOT NULL,
    reading_time TIMESTAMP NOT NULL
);

INSERT INTO doctors (name, specialization) VALUES
('Dr. Smith', 'Geriatrics'),
('Dr. Johnson', 'Cardiology'),
('Dr. Lee', 'Neurology'),
('Dr. Patel', 'Endocrinology'),
('Dr. Adams', 'General Medicine');



INSERT INTO patients (name, age, room_no, doctor_id) 
VALUES
('Alice', 82, 101, 1),
('Bob', 79, 102, 2),
('Carol', 85, 103, 1),
('David', 88, 104, 3),
('Ella', 77, 105, 2),
('Frank', 91, 106, 4);

INSERT INTO nurses (name, shift) VALUES
('Nurse Ann', 'Morning'),
('Nurse Ben', 'Evening'),
('Nurse Eva', 'Night'),
('Nurse Kim', 'Morning'),
('Nurse Omar', 'Evening');

INSERT INTO treatments (patient_id, nurse_id, treatment_type, treatment_time) VALUES
(1, 1, 'Physiotherapy', '2025-09-10 09:00:00'),
(2, 2, 'Medication', '2025-09-10 18:00:00'),
(1, 3, 'Medication', '2025-09-11 21:00:00'),
(3, 1, 'Checkup', '2025-09-12 10:00:00'),
(4, 2, 'Physiotherapy', '2025-09-12 17:00:00'),
(5, 5, 'Medication', '2025-09-12 18:00:00'),
(6, 4, 'Physiotherapy', '2025-09-13 09:00:00');

INSERT INTO medication_stock (medication_id,medication_name,quantity) VALUES
(1, 'Aspirin', 100),
(2, 'Ibuprofen', 50),
(3, 'Paracetamol', 75),
(4, 'Lisinopril', 25),
(5, 'Metformin', 20);

1

SELECT name, age FROM patients;

2

SELECT name FROM doctors WHERE specialization = 'Cardiology';

3

SELECT * FROM patients WHERE age > 80;


4

SELECT * FROM patients ORDER BY age ASC;

5


SELECT specialization, COUNT(*) as doctor_count FROM doctors GROUP BY specialization;

6

SELECT p.name as patient_name, d.name as doctor_name FROM patients p JOIN doctors d ON p.doctor_id = d.doctor_id;

7

SELECT t.*, p.name as patient_name, d.name as doctor_name FROM treatments t JOIN patients p ON t.patient_id = p.patient_id JOIN doctors d ON p.doctor_id = d.doctor_id;

8

SELECT d.name as doctor_name, COUNT(p.patient_id) as patient_count FROM doctors d LEFT JOIN patients p ON d.doctor_id = p.doctor_id GROUP BY d.doctor_id, d.name;

9

SELECT AVG(age) as average_age FROM patients;

10

SELECT treatment_type, COUNT(*) as count FROM treatments GROUP BY treatment_type ORDER BY count DESC LIMIT 1;

11

SELECT * FROM patients WHERE age > (SELECT AVG(age) FROM patients);

12

SELECT d.name as doctor_name, COUNT(p.patient_id) as patient_count FROM doctors d JOIN patients p ON d.doctor_id = p.doctor_id GROUP BY d.doctor_id, d.name HAVING COUNT(p.patient_id) > 5;

13

SELECT t.*, p.name as patient_name FROM treatments t JOIN nurses n ON t.nurse_id = n.nurse_id JOIN patients p ON t.patient_id = p.patient_id WHERE n.shift = 'Morning';

14

SELECT t.* FROM treatments t
JOIN (
    SELECT patient_id, MAX(treatment_time) as latest_time 
    FROM treatments 
    GROUP BY patient_id
) as sub ON t.patient_id = sub.patient_id AND t.treatment_time = sub.latest_time;

15

SELECT d.name as doctor_name, AVG(p.age) as average_patient_age FROM doctors d LEFT JOIN patients p ON d.doctor_id = p.doctor_id GROUP BY d.doctor_id, d.name;

16

SELECT d.name as doctor_name FROM doctors d JOIN patients p ON d.doctor_id = p.doctor_id GROUP BY d.doctor_id, d.name HAVING COUNT(p.patient_id) > 3;


17

SELECT * FROM patients WHERE patient_id NOT IN (SELECT patient_id FROM treatments);

18


WITH average_stock AS (
    SELECT AVG(CAST(quantity AS INTEGER)) AS avg_quantity 
    FROM medication_stock
)
SELECT * FROM medication_stock, average_stock WHERE CAST(quantity AS INTEGER) < avg_quantity;

19

SELECT 
    d.name as doctor_name, 
    p.name as patient_name, 
    p.age,
    RANK() OVER (PARTITION BY d.doctor_id ORDER BY p.age DESC) as age_rank FROM doctors d JOIN patients p ON d.doctor_id = p.doctor_id;


20

WITH doctor_oldest_patient AS (
    SELECT 
        d.doctor_id, 
        d.name as doctor_name, 
        d.specialization, 
        MAX(p.age) as max_patient_age
    FROM doctors d
    JOIN patients p ON d.doctor_id = p.doctor_id
    GROUP BY d.doctor_id, d.name, d.specialization
),
spec_max_age AS (
    SELECT 
        specialization, 
        MAX(max_patient_age) as overall_max_age
    FROM doctor_oldest_patient
    GROUP BY specialization
)
SELECT 
    dop.specialization, 
    dop.doctor_name, 
    dop.max_patient_age as oldest_patient_age
FROM doctor_oldest_patient dop
JOIN spec_max_age sma ON dop.specialization = sma.specialization 
    AND dop.max_patient_age = sma.overall_max_age;
